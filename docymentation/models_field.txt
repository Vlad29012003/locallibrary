###############
CharField
###############


max_lenght = максимальная длина 
blank = True , False  = Может ли поде быть пустым или нет 
null = может ли поле иметь значение  True , False
default =  значения по умолчанию 

ПРИМЕР
class Author(models.Model):
    first_name = models.CharField(max_length = 100, blank=False)
    last_name = models.CharField(max_length = 100 blank= False)
    salary = models.IntegerField(default=0)


###############
IntegerField
###############

blank True , False  = Может ли поде быть пустым или нет 
null = может ли поле иметь значение  True , False
default =  значения по умолчанию 
choices =  Позволяет определить ограниченный набор возможных значений.

ПРИМЕР

class MyModel(models.Model):
    empty_field = models.IntegerField(blank=True, null=True)
    non_empty_field_with_default = models.IntegerField(blank=False, null=False, default=0)
    field_with_choices = models.IntegerField(choices=[(1, 'Опция 1'), (2, 'Опция 2'), (3, 'Опция 3')])
    field_with_choices_and_default = models.IntegerField(choices=[(1, 'Опция 1'), (2, 'Опция 2'), (3, 'Опция 3')],default=1)


#############
DateField
############

auto_now = Если установлено в True, поле будет автоматически устанавливать текущую дату при каждом сохранении объекта.
auto_now_add = Если установлено в True, поле будет устанавливать текущую дату только при создании объекта.

ПРИМЕР

class MyModel(models.Model):
    updated_at = models.DateField(auto_now=True)
    created_at = models.DateField(auto_now_add=True)
    another_date_field = models.DateField(auto_now=True, blank=True, null=True)


#############
DateTimeField
#############

auto_now = Если установлено в True, поле будет автоматически устанавливать текущую дату при каждом сохранении объекта.
auto_now_add = Если установлено в True, поле будет устанавливать текущую дату только при создании объекта.

ПРИМЕР
class MyModel(models.Model):
    updated_at = models.DateTimeField(auto_now=True)
    created_at = models.DateTimeField(auto_now_add=True)
    another_datetime_field = models.DateTimeField(auto_now=True, blank=True, null=True)


############
ForeignKey
############
to = Указывает на модель, к которой создается внешний ключ.
on_delete = Определяет действие, которое будет выполнено при удалении связанной записи (например, models.CASCADE означает удаление всех связанных записей).

ПРИМЕР
class Author(models.Model):
    name = models.CharField(max_length=100)

class Book(models.Model):
    title = models.CharField(max_length=200)
    author = models.ForeignKey(Author, on_delete=models.CASCADE)


############
BooleanField
############
default = Устанавливает значение по умолчанию для поля.

ПРИМЕР
class Task(models.Model):
    is_completed = models.BooleanField(default=False)


############
TextField           предназначен для хранения длинных строк переменной длины.
############
max_lenght =  максимальная длина 

ПРИМЕР
class Article(models.Model):
    content = models.TextField()
    short_description = models.TextField(max_length=20)


#############
EmailField    предназначен для хранения и валидации email-адресов в базе данных. Это поле применяется в случаях, когда вы хотите убедиться, что значение, сохраняемое в поле, соответствует формату электронной почты.
#############
max_length = максимальная длина 

ПРИМЕР
class UserProfile(models.Model):
    email = models.EmailField(max_length=255)




Методы классов djano

__str__  = предназначен для предоставления строкового представления объекта.
ПРИМЕР
def __str__(self):
    return self.last_name
